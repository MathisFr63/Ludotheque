On a pas encore vu les listes mais il faudra en faire plus tard
(personne.nbEmp, calculer en fonction du nombre de fois qu'apparaît son nom dans le tableau des emprunts)

FONCTIONS : 
* afficher ? La liste des inscrits à une aprem


À faire plus tard : création de deux adhérents ayant le même nom et pénom donc pour les différencier lors d'un emprunt : regarder combien ils sont et si il y en a plusieurs demander la ville ou le numéro de téléphone

!!! Reste à faire un for qui charge dès le début (le nb d'emprunts de chaque personne,) le nombre de places libres dans chaque am_th (et le nb d'exemplaires restant de chaque jeu). 

Créer une fonction qui permet de rechercher un jeu ou un nom et d'afficher toutes les informations (nom, prenom, adresse, tel, ville, nbEmp, jeu et dates);

Afficher les emprunts non rendus

Supprimer un jeu; supprimer un aprem; ordre du 9 adhérent, jeu, aprem
adhérent -> inscrire ; supprimer
emprunt -> enegistrer ; supprimer
aprem -> créer ; supprimer
adh aprem -> inscrire supprimer
jeu -> enregistrer supprimer






	testJeux j;
	
	int nbJeux = 0, i, trouve;
	char jeu[30];

	j = jVide();
	j = newJeu(j, &nbJeux);

	j = triJeux(j, nbJeux, '1');
	tmp = j;
	printf("Jeu : ");
	for (i = 0; i < nbJeux; i++){
		printf("%s | ", tmp->nom);
		tmp = tmp->suiv;
	}
	printf("\n");

	if (j == NULL)
		printf("triJeux est pourtant NULL\n");

	printf("Jeux à rechercher : ");
	fgets(jeu, 30, stdin);
	if (jeu[strlen(jeu)-1] == '\n')
		jeu[strlen(jeu)-1] = '\0';

	trouve = rechJeux(j, jeu);

	if (trouve == -1)
		printf("Le jeu %s n'a pas était trouvé !\n", jeu);
	else{
		tmp = j;
		for (i = 0; i < trouve; i++)
			tmp = tmp->suiv;
		printf("Le jeu %s a était trouvé\n", tmp->nom);
	}
